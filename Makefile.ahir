AHIR_INCLUDEDIR = $(AHIR_RELEASE)/include
AHIR_LIBDIR = $(AHIR_RELEASE)/lib
AHIR_LIBS = GhdlLink ahir aHiR_ieee_proposed
AHIR_LIBWORKOBJS = $(addsuffix -obj93.cf,$(AHIR_LIBS))
VHDL_LIB = $(AHIR_RELEASE)/vhdl
FPULIB = $(AHIR_RELEASE)/functionLibrary/fpu.list
AACFILE = aa_c_model.c
AAGENFILES = $(AACFILE) aa_c_model_internal.h aa_c_model.h
AAOFILE = $(OBJDIR)/$(AACFILE:.c=.o)
COMCFLAGS = -c -I $(AHIR_INCLUDEDIR) -I. $(EXTRACFLAGS)
TBENCHOBJS = $(addprefix $(OBJDIR)/,$(addsuffix .o,$(basename $(TBENCHSRCS))))
TESTBENCHSW = testbench_sw
TESTBENCHHW = testbench_hw
TESTBENCHTOP = ahir_system
TESTBENCHSYS = $(TESTBENCHTOP)_test_bench
VCSRCS = $(AASRCS:.aa=.vc)
VHDLFILE = $(AASRCS:.aa=.vhdl)
WORKOBJ = work-obj93.cf
VHDLSTUBCFILE = vhdlCStubs.c
VHDLSTUBOFILE = $(OBJDIR)/$(VHDLSTUBCFILE:.c=.o)

# What should change from the sample commands in example makefiles
# To avoid issues due to mismatching flags, these are kept as per example makefiles
# -I 2 shouldn't be needed as it says deprecated
# -v (verbose) not needed
# -e should not be ideally needed
# -w should not be ideally needed, but without it the packages aren't getting generated
_VC2VHDLOPTS = -O -S 4 -I 2 -v -a -C -e $(TESTBENCHTOP) -w -s ghdl -T $(TOP) -L $(FPULIB) $(VC2VHDLOPTS)

# Target specific variables (Unfortunately they do not work with pattern rules.
# We use recursive invocation for that)
sw: CFLAGS = $(COMCFLAGS) -DSW
sw: OBJDIR = swobj
sw: LDFLAGS = -lBitVectors -lSockPipes -lPipeHandler -L $(AHIR_LIBDIR) -lpthread
hw: CFLAGS = $(COMCFLAGS)
hw: OBJDIR = hwobj
hw: LDFLAGS = -lSocketLibPipeHandler -L $(AHIR_LIBDIR) -lpthread

# For cleaning
OBJDIRS = swobj hwobj
CLEANUPFILES =  $(TESTBENCHSW) $(TESTBENCHHW) $(AACFILE) $(VCSRCS) $(VHDLFILE) $(VHDLSTUBCFILE) $(addsuffix /*.o,$(OBJDIRS)) aa_c_model_internal.h aa_c_model.h vhdlCStubs.h *-obj93.cf $(TESTBENCHTOP)*.unformatted_vhdl vhpi.log

all:
	@echo "Please invoke with specific targets"
	@echo "  sw : Build Aa 2 C test bench"
	@echo "  aa2vc : Just build vc files for AASRCS"
	@echo "  hw : Build vhdl test bench"
	@echo "  clean : Clean generated files"

sw:
	make CFLAGS="$(CFLAGS)" OBJDIR=$(OBJDIR) LDFLAGS="$(LDFLAGS)" _sw

hw:
	make CFLAGS="$(CFLAGS)" OBJDIR=$(OBJDIR) LDFLAGS="$(LDFLAGS)" _hw

_sw: $(TESTBENCHSW)

clean:
	rm -f $(CLEANUPFILES)
	ghdl --clean

$(TESTBENCHSW) : $(AAOFILE) $(TBENCHOBJS)
	cc $^ $(LDFLAGS) -o $@

$(AACFILE): $(AASRCS)
	Aa2C -O -T $(TOP) $(AA2COPTS) $<

aa2vc: $(VCSRCS)

_hw: $(TESTBENCHHW) $(TESTBENCHSYS)

$(TESTBENCHSYS): $(AHIR_LIBWORKOBJS) $(WORKOBJ)
	ghdl -m -Wl,-L$(AHIR_LIBDIR) -Wl,-lVhpi $@

$(TESTBENCHHW): $(VHDLSTUBOFILE) $(TBENCHOBJS)
	cc $^ $(LDFLAGS) -o $@

$(VHDLSTUBOFILE): $(VHDLSTUBCFILE)

$(VHDLSTUBCFILE): aa2vc

$(WORKOBJ): $(VHDLFILE)
	ghdl -i $<

# Unfortunately ghdl changes the case of output filename and it requires it to be like that
# We have to maintain a placeholder file with original case
%-obj93.cf: $(VHDL_LIB)/%.vhdl
	ghdl -i --work=$* $<
	touch $@

%.vc: %.aa
	Aa2VC -O $(AA2VCOPTS) -C $< | vcFormat > $@

$(OBJDIR)/%.o: %.c
	mkdir -p $(OBJDIR) && cc $(CFLAGS) $< -o $@

$(OBJDIR)/%.o: %.cpp
	mkdir -p $(OBJDIR) && c++ $(CFLAGS) $< -o $@

%.vhdl: %.vc
	vc2vhdl $(_VC2VHDLOPTS) -f $<
	cat $(TESTBENCHTOP)*.unformatted_vhdl | vhdlFormat > $@
